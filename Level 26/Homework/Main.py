# capitalize ადიდებს წინადადების პირველ ასოს და სხვა დანარჩენს აპატარავებს
#title კი ადიდებს წინადადებაში ყოველი სიტყვის პირველ ასოს


# 1) შექმენით ფუნქცია, რომელიც მიიღებს წინადადებას, ფუნქციამ
#  ამ წინადადების თითოეული სიტყვა უნდა შეინახოს სიაში, როგორც
#  ცალკე ელემენტი. საბოლოოდ გადააქციეთ სია ისევ წინადადებად,
#  სადაც სიტყვებს შორის არის მძიმე და ერთი დაშორება(", ")

def split(text):
    split_text = text.split() # ვხლიჩავთ ტექსტს
    new_text = ", ".join (split_text) # და ვუმატებთ , ჯოინის დახმარებით
    return (new_text[0:])
    

       
print(split("hello hello allo"))

# 2) შექმენით ფუნქცია, რომელიც მიიღებს წინადადებას და დაბეჭდავს მის თითოეულ სიტყვაში სიმბოლოების რაოდენობას(ცალ-ცალკე)

def counting_letters_per_word(text):
    text = text.split() # ვხლიჩავთ ტექსტს
    for word in text:
        print(f"{word} : {len(word)}") # ფორ ციკლით თითო სიტყვის ასოების რაოდენიობას ვითვლით
    
print (counting_letters_per_word("hello wassup my boy?"))    


# 3) შექმენით ფუნქცია, რომელიც იღებს წინადადებას, სადაც ყოველი სიტყვის შორის ერთზე მეტი დაშორებაა(space). თქვენი დავალებაა ჩამოაშოროთ გადმოცემულ წინადადებას ზედმეტი space-ები(სიტყვებს შორის მხოლოდ ერთი უნდა იყოს). საბოლოოდ დააბრუნეთ ეს წინადადება
def deleting_double_spaces(text):
    while "  " in text:  # ეს ციკლი მუშაობს მანამ სანამ ორი ან ორზე მეტი ტირე არსებობს ტექტში
        text = text.replace("  ", " ")  # რეპლაისის დახმარებით ყველა მაგ დიდ სპეისებს ვცვლით ერტ სპეისში
    return text

print(deleting_double_spaces("stop  right    there criminal scum!"))    

# 4) შექმენით ფუნქცია, რომელიც იღებს წინადადებას, და მასში space-ების მაგივრად სიტყვებს შორის ჩასვამს ტირეს("-"). საბოლოოდ კი აბრუნებს მას
def replacing_spaces (text):
    while " " in text:# იგივე ნაირად სანამ სპეისი არსებობს მანამდე მუშაობს
        text = text.replace(" ", "-") #და ვცვლით სპაისები ტირეებზე
    return text

print(replacing_spaces("im the storm that is approaching"))    


# 5) შექმენით ფუნქცია, რომელსაც გადაეცემა წინადადება. თქვენი დავალებაა ამ წინადადების სიტყვები შეაბრუნოთ და დააბრუნოთ(სიტყვების სიმბოლოები არ უნდა იყოს შებრუნებული)
def word_turner(text):
    lenght = len(text)  # ვიგებთ სიმბოლოების რაოდენობას
    
    half_text = text[:lenght//2] #ვყობთ ჯერ წინადადების ერთი ნახევარი
    
    second_half = text[lenght//2:] # მერე მეორე
    return  second_half +" "+ half_text # და ვაერთებთ მარა უკუღმა

print(word_turner("hello levan how are you")) 